{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "D:\\furycode - \u526F\u672C\\.wrangler\\tmp\\deploy-xR0T4G",
  "sourcesContent": ["// Cloudflare Workers entry point\r\nconst worker = {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    \r\n    // \u5904\u7406 API \u8DEF\u7531\r\n    if (url.pathname.startsWith('/api/')) {\r\n      return handleApiRequest(request, env, ctx);\r\n    }\r\n    \r\n    // \u5904\u7406\u9759\u6001\u6587\u4EF6\r\n    if (url.pathname.startsWith('/_next/') || url.pathname.startsWith('/static/')) {\r\n      return env.ASSETS.fetch(request);\r\n    }\r\n    \r\n    // \u9ED8\u8BA4\u54CD\u5E94\r\n    return new Response('Kemono Shares API is running!', {\r\n      headers: { \r\n        'Content-Type': 'text/plain',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type'\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nasync function handleApiRequest(request, _env, _ctx) {\r\n  const url = new URL(request.url);\r\n  \r\n  // \u5904\u7406 CORS \u9884\u68C0\u8BF7\u6C42\r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n      },\r\n    });\r\n  }\r\n  \r\n  // \u7B80\u5355\u7684 API \u54CD\u5E94\r\n  return new Response(JSON.stringify({\r\n    message: 'Kemono Shares API',\r\n    endpoint: url.pathname,\r\n    method: request.method,\r\n    timestamp: new Date().toISOString()\r\n  }), {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\nexport default worker; "],
  "mappings": ";;;;AACA,IAAM,SAAS;AAAA,EACb,MAAM,MAAM,SAAS,KAAK,KAAK;AAC7B,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,QAAI,IAAI,SAAS,WAAW,OAAO,GAAG;AACpC,aAAO,iBAAiB,SAAS,KAAK,GAAG;AAAA,IAC3C;AAGA,QAAI,IAAI,SAAS,WAAW,SAAS,KAAK,IAAI,SAAS,WAAW,UAAU,GAAG;AAC7E,aAAO,IAAI,OAAO,MAAM,OAAO;AAAA,IACjC;AAGA,WAAO,IAAI,SAAS,iCAAiC;AAAA,MACnD,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,eAAe,iBAAiB,SAAS,MAAM,MAAM;AACnD,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAG/B,MAAI,QAAQ,WAAW,WAAW;AAChC,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,SAAS;AAAA,QACP,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AAGA,SAAO,IAAI,SAAS,KAAK,UAAU;AAAA,IACjC,SAAS;AAAA,IACT,UAAU,IAAI;AAAA,IACd,QAAQ,QAAQ;AAAA,IAChB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC,CAAC,GAAG;AAAA,IACF,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAAA,EACF,CAAC;AACH;AA5Be;AA8Bf,IAAO,gBAAQ;",
  "names": []
}
